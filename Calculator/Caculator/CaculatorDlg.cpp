
// CaculatorDlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "Caculator.h"
#include "CaculatorDlg.h"
#include "afxdialogex.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 대화 상자 데이터입니다.
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CCaculatorDlg 대화 상자
CCaculatorDlg::CCaculatorDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_CACULATOR_DIALOG, pParent)
	, m_strInput(_T(""))
	, m_bEntered(true)
	, m_bFirstCalc(true)
	, m_iLastResult(0)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

CCaculatorDlg::~CCaculatorDlg()
{
}

void CCaculatorDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_EDIT1, m_strInput);
	DDX_Control(pDX, IDC_EDIT1, m_editInput);
	DDX_Control(pDX, IDC_EDIT2, m_editResult);
	DDX_Control(pDX, IDC_EDIT3, m_editResultList);
}

//void CCaculatorDlg::OnOK()
//{
//	
//}
//
//void CCaculatorDlg::OnCancel()
//{
//	//::EndDialog(m_hWnd, IDCANCEL);
//	//EndDialog(IDCANCEL);
//	CDialog::OnCancel();
//}

BEGIN_MESSAGE_MAP(CCaculatorDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_CONTROL_RANGE(BN_CLICKED, IDC_BUTTON0, IDC_BUTTON9, &CCaculatorDlg::OnBnClickedButton)
	ON_CONTROL_RANGE(BN_CLICKED, IDC_BUTTON_PLUS, IDC_BUTTON_DIVISION, &CCaculatorDlg::OnBnClickedOperator)
	ON_BN_CLICKED(IDC_BUTTON_CALC, &CCaculatorDlg::OnBnClinckedCalc)
	ON_BN_CLICKED(IDC_BUTTON_ERASE, &CCaculatorDlg::OnBnClickedErase)
	ON_BN_CLICKED(IDC_BUTTON_CLEAR, &CCaculatorDlg::OnBnClickedClear)
	
END_MESSAGE_MAP()


// CCaculatorDlg 메시지 처리기
BOOL CCaculatorDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();
	
	m_editInput.SetWindowTextW(L"0");
	
	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다.  응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	// TODO: 여기에 추가 초기화 작업을 추가합니다.

	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

void CCaculatorDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다.  문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CCaculatorDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CCaculatorDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

void CCaculatorDlg::OnOK()
{
}

void CCaculatorDlg::OnBnClickedButton(UINT _id)
{	
	UINT iNum = _id - 2000;
	
	CString str;
	m_editInput.GetWindowTextW(str);
	
	int iOuput = _wtoi(str.GetBuffer());	
	iOuput *= 10;
	if (!m_bEntered)
	{
		str.Format(L"%d", iNum);
	}
	else
	{
		iOuput += iNum;
		str.Format(L"%d", iOuput);
	}
	m_bEntered = true;
	m_editInput.SetWindowTextW(str);
}

//void CCaculatorDlg::OnBnClickedButton1()
//{
//	// ::SetDlgItemText(m_hWnd, IDC_EDIT1, L"1");
//	// m_strOutput = L"1";
//	// UpdateData(false); // true 값을 저장, false 값을 전송	
//
//	m_editInput.SetWindowTextW(L"1");
//}


void CCaculatorDlg::OnBnClickedOperator(UINT _id)
{
	m_curOperator = _id;
	if (!m_bEntered)
	{

	}
	ApplyCalc();

	CString str;
	str.Format(L"%d", m_iLastResult);
	m_editInput.SetWindowTextW(str);
}

void CCaculatorDlg::ApplyCalc()
{
	
	CString str;
	m_editInput.GetWindowTextW(str);
	int iInput = _wtoi(str.GetBuffer());
	m_editResult.GetWindowTextW(str);
	switch (m_curOperator)
	{
	case IDC_BUTTON_PLUS:
		m_iLastResult += iInput;
		str.Format(L"%s%d%s", str, iInput, L"+");
		break;
	case IDC_BUTTON_SUB:
		m_iLastResult -= iInput;
		str.Format(L"%s%d%s", str, iInput, L"-");
		break;
	case IDC_BUTTON_MULTIPLY:
		m_iLastResult = m_bFirstCalc ? iInput : m_iLastResult * iInput;
		str.Format(L"%s%d%s", str, iInput, L"*");
		break;
	case IDC_BUTTON_DIVISION:
		m_iLastResult = m_bFirstCalc ? iInput : m_iLastResult / iInput;
		str.Format(L"%s%d%s", str, iInput, L"/");
		break;
	}
	m_bFirstCalc = false;
	m_bEntered = false;
	m_editResult.SetWindowTextW(str);
}

void CCaculatorDlg::OnBnClinckedCalc()
{
	ApplyCalc();
	
	CString strResult;
	strResult.Format(L"%d", m_iLastResult);
	m_editInput.SetWindowTextW(strResult);
		
	CString str;
	m_editResultList.GetWindowTextW(str);
	wstring addString = str;
	m_editResult.GetWindowTextW(str);
	str.Delete(str.GetLength() - 1, 1);
	addString += str + L"="+ strResult + "\r\n";
	m_editResultList.SetWindowTextW(addString.c_str());
	
	m_editResult.SetWindowTextW(L"");
	m_iLastResult = 0;
	m_bFirstCalc = true;
}


void CCaculatorDlg::OnBnClickedErase()
{
	CString str;
	m_editInput.GetWindowTextW(str);
	str.Delete(str.GetLength()-1, 1);
	if (str == L"")
		str = L"0";
	m_editInput.SetWindowTextW(str);
}

void CCaculatorDlg::OnBnClickedClear()
{
	m_editInput.SetWindowTextW(L"0");
	m_editResult.SetWindowTextW(L"");
	m_iLastResult = 0;
	m_bEntered = false;
	m_bFirstCalc = true;
}

